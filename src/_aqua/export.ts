/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.6.1-279
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

// Functions
 

export function joinRoom(
    peerId: string,
    label: string,
    config?: {ttl?: number}
): Promise<string>;

export function joinRoom(
    peer: FluencePeer,
    peerId: string,
    label: string,
    config?: {ttl?: number}
): Promise<string>;

export function joinRoom(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "peerId") [] peerId)
                       )
                       (call %init_peer_id% ("getDataSrv" "label") [] label)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") ["ok"])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "joinRoom",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "peerId",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "label",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function createRoom(
    label: string,
    config?: {ttl?: number}
): Promise<string>;

export function createRoom(
    peer: FluencePeer,
    label: string,
    config?: {ttl?: number}
): Promise<string>;

export function createRoom(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "label") [] label)
                       )
                       (new $relay_id
                        (seq
                         (ap -relay- $relay_id)
                         (xor
                          (seq
                           (seq
                            (call -relay- ("op" "string_to_b58") [label] k)
                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                           )
                           (par
                            (fold nodes n
                             (par
                              (xor
                               (xor
                                (seq
                                 (seq
                                  (call n ("peer" "timestamp_sec") [] t)
                                  (call n ("aqua-dht" "register_key") [label t false 0])
                                 )
                                 (call n ("aqua-dht" "put_value") [label "myValue" t $relay_id [] 0])
                                )
                                (null)
                               )
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                               )
                              )
                              (next n)
                             )
                            )
                            (null)
                           )
                          )
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") ["ok"])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "createRoom",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "label",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 

export function getMembers(
    peerId: string,
    label: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getMembers(
    peer: FluencePeer,
    peerId: string,
    label: string,
    config?: {ttl?: number}
): Promise<string[]>;

export function getMembers(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "peerId") [] peerId)
                        )
                        (call %init_peer_id% ("getDataSrv" "label") [] label)
                       )
                       (call %init_peer_id% ("op" "array") ["1" "2" "3" "4"] res)
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "getMembers",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "peerId",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "label",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

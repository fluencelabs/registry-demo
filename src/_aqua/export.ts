/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.6.1-279
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface DiscoveryServiceDef {
    notify_discovered: (route_id: string, userName: string, callParams: CallParams<'route_id' | 'userName'>) => { route: string; userName: string; }[] | Promise<{ route: string; userName: string; }[]>;
}
export function registerDiscoveryService(service: DiscoveryServiceDef): void;
export function registerDiscoveryService(serviceId: string, service: DiscoveryServiceDef): void;
export function registerDiscoveryService(peer: FluencePeer, service: DiscoveryServiceDef): void;
export function registerDiscoveryService(peer: FluencePeer, serviceId: string, service: DiscoveryServiceDef): void;
       

export function registerDiscoveryService(...args: any) {
    registerService(
        args,
        {
    "defaultServiceId" : "discoveryService",
    "functions" : [
        {
            "functionName" : "notify_discovered",
            "argDefs" : [
                {
                    "name" : "route_id",
                    "argType" : {
                        "tag" : "primitive"
                    }
                },
                {
                    "name" : "userName",
                    "argType" : {
                        "tag" : "primitive"
                    }
                }
            ],
            "returnType" : {
                "tag" : "primitive"
            }
        }
    ]
}
    );
}
      
// Functions
 

export function createMyRoute(
    label: string,
    userName: string,
    config?: {ttl?: number}
): Promise<string>;

export function createMyRoute(
    peer: FluencePeer,
    label: string,
    userName: string,
    config?: {ttl?: number}
): Promise<string>;

export function createMyRoute(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "label") [] label)
                        )
                        (call %init_peer_id% ("getDataSrv" "userName") [] userName)
                       )
                       (new $relay
                        (seq
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (ap -relay- $relay)
                               (call %init_peer_id% ("peer" "timestamp_sec") [] t)
                              )
                              (xor
                               (call -relay- ("registry" "get_key_bytes") [label [] t [] ""] bytes)
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                             )
                             (call %init_peer_id% ("sig" "sign") [bytes] signature)
                            )
                            (xor
                             (call -relay- ("registry" "get_key_id") [label %init_peer_id%] route_id)
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                            )
                           )
                           (xor
                            (call -relay- ("registry" "get_record_bytes") [route_id userName $relay [] t []] bytes-0)
                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                           )
                          )
                          (call %init_peer_id% ("sig" "sign") [bytes-0] signature-0)
                         )
                         (xor
                          (seq
                           (seq
                            (call -relay- ("op" "string_to_b58") [route_id] k)
                            (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                           )
                           (par
                            (fold nodes n
                             (par
                              (xor
                               (xor
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (call n ("peer" "timestamp_sec") [] t-0)
                                     (call n ("trust-graph" "get_weight") [%init_peer_id% t-0] weight)
                                    )
                                    (call n ("registry" "register_key") [label [] t [] "" signature.$.signature! false weight t-0] result)
                                   )
                                   (call n ("peer" "timestamp_sec") [] t-1)
                                  )
                                  (call n ("trust-graph" "get_weight") [%init_peer_id% t-1] weight-0)
                                 )
                                 (call n ("registry" "put_record") [route_id userName $relay [] t [] signature-0.$.signature! weight-0 t-1] result-0)
                                )
                                (null)
                               )
                               (seq
                                (call -relay- ("op" "noop") [])
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                               )
                              )
                              (next n)
                             )
                            )
                            (null)
                           )
                          )
                          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [route_id])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "createMyRoute",
    "returnType" : {
        "tag" : "primitive"
    },
    "argDefs" : [
        {
            "name" : "label",
            "argType" : {
                "tag" : "primitive"
            }
        },
        {
            "name" : "userName",
            "argType" : {
                "tag" : "primitive"
            }
        }
    ],
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}
